import{cT as g,f5 as d,cU as m,f6 as l,fc as u,cV as c,a9 as f,W as p}from"./chunk-JaFSy54E.js";import{f as y,c as _,y as o,e as H}from"./chunk-D_yTKJJf.js";import{$ as w}from"./chunk-Gwk5QqIU.js";import{h as v}from"./chunk-DFNUr-gV.js";import{v as U}from"./chunk-BFURilhV.js";import{p as $}from"./chunk-D9NSWKm2.js";import{U as x}from"./chunk-BPVpIJRC.js";import"./chunk-FKPdDv5g.js";import"./chunk-V58knCOp.js";import"./chunk-DUPwJEpw.js";import"./chunk-BItlAk18.js";import"./chunk-D5zmR9t2.js";import"./chunk-kC8DabUQ.js";import"./chunk-gQoxAMTo.js";import"./chunk-Wa8cmqdu.js";import"./chunk-DY3lNizI.js";import"./chunk-BnPGKBCV.js";import"./chunk-B3yDz5-Y.js";import"./chunk-45_l6mF9.js";import"./chunk-B634NlaY.js";import"./chunk-BC6WeNM-.js";let h=class extends $(g(d(m))){constructor(){super(...arguments),this._highlightGraphics=new l,this._updateHash=""}fetchPopupFeaturesAtLocation(t,e){return this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,e)}update(t){const e=`${this.exportImageVersion}/${t.state.id}/${t.pixelRatio}/${t.stationary}`;this._updateHash!==e&&(this._updateHash=e,this.strategy.update(t).catch(i=>{y(i)||_.getLogger(this).error(i)}),t.stationary&&this._popupHighlightHelper.updateHighlightedFeatures(t.state.resolution)),this._highlightView.processUpdate(t)}attach(){const{imageMaxWidth:t,imageMaxHeight:e,version:i}=this.layer,a=i>=10.3,n=i>=10;this._bitmapContainer=new u,this.container.addChild(this._bitmapContainer),this._highlightView=new w({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new v(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1}),this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new x({createFetchPopupFeaturesQueryGeometry:(r,s)=>c(r,s,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,s)=>{this._highlightView.graphicUpdateHandler({graphic:r,property:s})},layerView:this,updatingHandles:this._updatingHandles}),this.strategy=new U({container:this._bitmapContainer,fetchSource:this.fetchImageBitmap.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxWidth:t,imageMaxHeight:e,imageRotationSupported:a,imageNormalizationSupported:n,hidpi:!0}),this.addAttachHandles(f(()=>this.exportImageVersion,()=>this.requestUpdate())),this.requestUpdate()}detach(){this.strategy.destroy(),this.container.removeAllChildren(),this._bitmapContainer.removeAllChildren(),this._highlightView.destroy(),this._popupHighlightHelper.destroy()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}async doRefresh(){this._updateHash="",this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,e,i,a){return this.layer.fetchImage(t,e,i,{timeExtent:this.timeExtent,floors:this.floors,...a})}fetchImageBitmap(t,e,i,a){return this.layer.fetchImageBitmap(t,e,i,{timeExtent:this.timeExtent,floors:this.floors,...a})}highlight(t){return this._popupHighlightHelper.highlight(t)}};p([o()],h.prototype,"strategy",void 0),p([o()],h.prototype,"updating",void 0),h=p([H("esri.views.2d.layers.MapImageLayerView2D")],h);const Q=h;export{Q as default};
