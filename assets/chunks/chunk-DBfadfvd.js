import{a9 as l,bw as h,W as i}from"./chunk-JaFSy54E.js";import{s as c,F as u,g as d,y as a,e as m}from"./chunk-D_yTKJJf.js";import{n as y,X as _}from"./chunk-LgXm5W16.js";import{r as f}from"./chunk-BACMKK-a.js";import"./chunk-FKPdDv5g.js";import"./chunk-B634NlaY.js";import"./chunk-DUPwJEpw.js";import"./chunk-BItlAk18.js";import"./chunk-D5zmR9t2.js";import"./chunk-BC6WeNM-.js";import"./chunk-B7X19rIS.js";import"./chunk-Caulfaw_.js";import"./chunk-BtbY9apt.js";import"./chunk-DY3lNizI.js";import"./chunk-BnPGKBCV.js";import"./chunk-B0oCdwsk.js";import"./chunk-CO1pNOUO.js";let r=class extends f(_){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([l(()=>this.layer.customParameters,e=>this._worker.streamMessenger.updateCustomParameters(e)),this.layer.on("send-message-to-socket",e=>this._worker.streamMessenger.sendMessageToSocket(e)),this.layer.on("send-message-to-client",e=>{this._worker.streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),l(()=>this.layer.purgeOptions,()=>this._update()),l(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new c("stream-controller",this.pipelineErrorString):null}on(e,s){if(Array.isArray(e))return u(e.map(p=>this.on(p,s)));const t=["data-received","message-received"].includes(e);t&&this._worker.streamMessenger.enableEvent(e,!0);const o=super.on(e,s),n=this;return d(()=>{o.remove(),t&&(n._worker.closed||n.hasEventListener(e)||n._worker.streamMessenger.enableEvent(e,!1))})}queryLatestObservations(e,s){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new c("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return y(this._worker.features.executeQueryForLatestObservations(this._cleanUpQuery(e),s).then(t=>{const o=h.fromJSON(t);return o.features.forEach(n=>{n.layer=this.layer,n.sourceLayer=this.layer}),o}),new h({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this._worker.streamMessenger.disconnect(),this._doPause()}_doConnect(){this._worker.streamMessenger.connect(),this.resume()}_doClear(){this._worker.streamMessenger.clear(),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),s=this;return{...e,get container(){return s.featureContainer},setProperty:t=>{this.set(t.propertyName,t.value)}}}};i([a()],r.prototype,"pipelineConnectionStatus",void 0),i([a()],r.prototype,"pipelineErrorString",void 0),i([a({readOnly:!0})],r.prototype,"connectionError",null),i([a({readOnly:!0})],r.prototype,"_streamConnectionStatus",null),r=i([m("esri.views.2d.layers.StreamLayerView2D")],r);const x=r;export{x as default};
