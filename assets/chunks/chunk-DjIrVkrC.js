import{f5 as o,cU as p,w as n,V as c,W as a,ff as l}from"./chunk-JaFSy54E.js";import{u as d,q as m,g,y as u,e as w}from"./chunk-D_yTKJJf.js";import{t as y}from"./chunk-u3EXq9u0.js";import{$ as f}from"./chunk-Gwk5QqIU.js";import{t as V}from"./chunk-B0oCdwsk.js";import"./chunk-FKPdDv5g.js";import"./chunk-45_l6mF9.js";import"./chunk-B634NlaY.js";import"./chunk-DUPwJEpw.js";import"./chunk-BItlAk18.js";import"./chunk-D5zmR9t2.js";import"./chunk-BC6WeNM-.js";import"./chunk-DY3lNizI.js";import"./chunk-BnPGKBCV.js";import"./chunk-V58knCOp.js";import"./chunk-kC8DabUQ.js";import"./chunk-gQoxAMTo.js";import"./chunk-Wa8cmqdu.js";import"./chunk-B3yDz5-Y.js";let s=class extends o(p){constructor(){super(...arguments),this._highlightCounter=new V}attach(){this.graphicsView=new f({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new y(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this._updateHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=d(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,t="highlight"){let e;typeof i=="number"?e=[i]:i instanceof n?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):c.isCollection(i)&&i.length>0&&(e=i.map(r=>r&&r.uid).toArray());const h=e?.filter(m);return h?.length?(this._addHighlight(h,t),g(()=>this._removeHighlight(h,t))):g()}_addHighlight(i,t){this._highlightCounter.addReason(i,t),this._updateHighlight()}_removeHighlight(i,t){this._highlightCounter.deleteReason(i,t),this._updateHighlight()}_updateHighlight(){const i=[];for(const t of this._highlightCounter.ids()){const e=this._highlightCounter.getHighestReason(t),h=l(e);i.push({objectId:t,highlightFlags:h})}this.graphicsView?.setHighlight(i)}};a([u()],s.prototype,"graphicsView",void 0),s=a([w("esri.views.2d.layers.GraphicsLayerView2D")],s);const E=s;export{E as default};
