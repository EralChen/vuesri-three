import{_ as p}from"./chunk-FKPdDv5g.js";import{aU as m,aV as w,aW as g,aX as T,aY as f,aZ as b,U as d,a_ as S,a$ as _,W as s,b0 as c,b1 as $,b2 as I,ad as O}from"./chunk-JaFSy54E.js";import{t as E,s as j,j as D,k as h,y as o,e as L}from"./chunk-D_yTKJJf.js";let i=class extends m(w(g(T(f(O))))){constructor(...t){super(...t),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=b()}normalizeCtorArgs(t,r){return typeof t=="string"?{url:t,...r}:t}destroy(){this._lercDecoder=E(this._lercDecoder)}readCapabilities(t,r){const e=r.capabilities&&r.capabilities.split(",").map(a=>a.toLowerCase().trim());return e?{operations:{supportsTileMap:e.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(t,r){let e=r.currentVersion;return e||(e=9.3),e}load(t){const r=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{if(e.typeKeywords){for(let a=0;a<e.typeKeywords.length;a++)if(e.typeKeywords[a].toLowerCase()==="elevation 3d layer")return!0}throw new j("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},t).catch(D).then(()=>this._fetchImageService(r))),Promise.resolve(this)}fetchTile(t,r,e,a){const l=(a=a||{signal:null}).signal!=null?a.signal:a.signal=new AbortController().signal,u={responseType:"array-buffer",signal:l},v={noDataValue:a.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(t,r,e,a)).then(()=>d(this.getTileUrl(t,r,e),u)).then(n=>this._lercDecoder.decode(n.data,v,l)).then(n=>new S(n))}getTileUrl(t,r,e){const a=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,l=_({...this.parsedUrl.query,blankTile:!a&&null});return`${this.parsedUrl.path}/tile/${t}/${r}/${e}${l?"?"+l:""}`}async queryElevation(t,r){const{ElevationQuery:e}=await p(()=>import("./chunk-nF5kP0qr.js"),__vite__mapDeps([0,1,2,3]));return h(r),new e().query(this,t,r)}async createElevationSampler(t,r){const{ElevationQuery:e}=await p(()=>import("./chunk-nF5kP0qr.js"),__vite__mapDeps([0,1,2,3]));return h(r),new e().createSampler(this,t,r)}_fetchTileAvailability(t,r,e,a){return this.tilemapCache?this.tilemapCache.fetchAvailability(t,r,e,a):Promise.resolve("unknown")}async _fetchImageService(t){if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:t},e=await d(this.parsedUrl.path,r);e.ssl&&(this.url=this.url?.replace(/^http:/i,"https:")),this.sourceJSON=e.data,this.read(e.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[y]}};s([o({readOnly:!0})],i.prototype,"capabilities",void 0),s([c("service","capabilities",["capabilities"])],i.prototype,"readCapabilities",null),s([o({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),s([o({readOnly:!0,type:$})],i.prototype,"heightModelInfo",void 0),s([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),s([o({type:["show","hide"]})],i.prototype,"listMode",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],i.prototype,"minScale",void 0),s([o({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],i.prototype,"maxScale",void 0),s([o({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],i.prototype,"opacity",void 0),s([o({type:["ArcGISTiledElevationServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([o()],i.prototype,"sourceJSON",void 0),s([o({json:{read:!1},value:"elevation",readOnly:!0})],i.prototype,"type",void 0),s([o(I)],i.prototype,"url",void 0),s([o()],i.prototype,"version",void 0),s([c("version",["currentVersion"])],i.prototype,"readVersion",null),i=s([L("esri.layers.ElevationLayer")],i);const y=Symbol("default-fetch-tile");i.prototype.fetchTile[y]=!0;const x=i;export{x as default};
function __vite__mapDeps(indexes) {
  if (!__vite__mapDeps.viteFileDeps) {
    __vite__mapDeps.viteFileDeps = ["assets/chunks/chunk-nF5kP0qr.js","assets/chunks/chunk-JaFSy54E.js","assets/chunks/chunk-D_yTKJJf.js","assets/chunks/chunk-FKPdDv5g.js"]
  }
  return indexes.map((i) => __vite__mapDeps.viteFileDeps[i])
}
